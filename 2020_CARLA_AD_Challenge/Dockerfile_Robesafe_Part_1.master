# CARLA Autonomous Driving Challenge 2020
# Carlos Gómez-Huélamo (RobeSafe research group - University of Alcalá)

FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG http_proxy

RUN apt-get update && apt-get install --reinstall -y locales && locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US
ENV LC_ALL en_US.UTF-8

RUN apt-get update && apt-get install -y --no-install-recommends \
         apt-utils \
         build-essential \
         cmake \
         git \
         curl \
         vim \
         ca-certificates \
         libjpeg-dev \
	     libpng16-16 \
	     libtiff5 \
         libpng-dev \
         python-dev \
         python3.5 \
         python3.5-dev \
         python-networkx \
         python-setuptools \
         python3-setuptools \
         python-pip \
         python3-pip && \
         pip install --upgrade pip && \
         pip3 install --upgrade pip && \
         rm -rf /var/lib/apt/lists/*

# installing conda
RUN curl -o ~/miniconda.sh -LO https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda clean -ya && \
     /opt/conda/bin/conda create -n python37 python=3.7 numpy networkx scipy six requests

RUN packages='py_trees==0.8.3 shapely six dictor requests ephem tabulate' \
	&& pip3 install ${packages}

WORKDIR /workspace
COPY .tmp/PythonAPI /workspace/CARLA/PythonAPI
ENV CARLA_ROOT /workspace/CARLA

ENV PATH "/workspace/CARLA/PythonAPI/carla/dist/carla-leaderboard-py3x.egg":/opt/conda/envs/python37/bin:/opt/conda/envs/bin:$PATH

# adding CARLA egg to default python environment
RUN pip install --user setuptools py_trees==0.8.3 psutil shapely six dictor requests ephem tabulate

ENV SCENARIO_RUNNER_ROOT "/workspace/scenario_runner"
ENV LEADERBOARD_ROOT "/workspace/leaderboard"
ENV TEAM_CODE_ROOT "/workspace/team_code"

COPY .tmp/scenario_runner ${SCENARIO_RUNNER_ROOT}
COPY .tmp/leaderboard ${LEADERBOARD_ROOT}

RUN mkdir -p /workspace/results
RUN chmod +x /workspace/leaderboard/scripts/run_evaluation.sh

########################################################################################################################
########################################################################################################################
############                                BEGINNING OF USER COMMANDS                                      ############
########################################################################################################################
########################################################################################################################

# 0. Additional tools required 

RUN apt-get update && apt-get install -y lsb-release \
	apt-utils \
	wget \
	ca-certificates \
	bash \
	sudo

# 1. Install the NVIDIA driver

RUN mkdir -p /workspace/installations && \
	apt-get update && \
	apt-get install -y software-properties-common \
	module-init-tools

COPY ./NVIDIA-Linux-x86_64-440.100.run /workspace/installations

RUN cd /workspace/installations && \
	./NVIDIA-Linux-x86_64-440.100.run -s -N --no-kernel-module

# 2. Install OpenPCDet 

## Clone OpenPCDet repository and install requirements

RUN cd /workspace/installations && \
	git clone https://github.com/JavierEgido/OpenPCDet.git && \
	cd OpenPCDet && \
	pip install -r requirements.txt 

## Install SpConv 

### Update CMake version
 
RUN apt purge -y cmake

RUN cd /workspace/installations && \
	wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2.tar.gz && \
	tar -zxvf cmake-3.13.2.tar.gz && \
	cd cmake-3.13.2 && \
	./bootstrap && \
	make && \
	make install 

### Clone SpConv repository and install requirements

RUN cd /workspace/installations && \ 
	git clone https://github.com/traveller59/spconv --recursive && \
	apt-get install -y libboost-all-dev && \
	cd spconv && \
	python setup.py bdist_wheel && \
	cd ./dist && \
	pip install spconv-1.2.1-cp37-cp37m-linux_x86_64.whl

## Install the PCDet library

RUN echo "export PATH=$PATH:/usr/local/cuda-9.0/bin" >> ~/.bashrc && \ 
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64" >> ~/.bashrc

###########################################
##### Install using interactive shell #####

#RUN cd /workspace/installations/OpenPCDet && \
#	python setup.py develop

# Modify the calib_file and cfg_root in the inference.py script (OpenPCDet-ROS, in the ROS workspace)
# Modify the _BASE_CONFIG line int the pointpillars.yaml (in this case), located at the OpenPCDet library -> tools -> cfgs -> kitti_models
# Include in the file pointpillar_7728.pth in the kitti_models folder (e.g. ~/t4ac_ws/src/t4ac_perception/detection/libraries/OpenPCDet/tools/cfgs/kitti_models/)

###########################################
###########################################

# 3. Include darknet cfg and weights

RUN mkdir -p /workspace/installations/darknet_ros_config
COPY ./cfg /workspace/installations/darknet_ros_config
COPY ./weights /workspace/installations/darknet_ros_config

# Modify: Include the ROS message even if there is no detection
# Comment this line (printf("%s: %.0f%%\n", names[j], dets[i].prob[j]*100);) in image.c (darknet folder)

# 4. Install ROS Kinetic

## Install ROS

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN apt-get update && apt-get install -y ros-kinetic-desktop-full

## Initialize ROS

RUN rosdep init
RUN rosdep update

## Install additional ROS-packages

RUN apt-get update && \
	apt-get install -y ros-kinetic-geographic-msgs \
	ros-kinetic-geodesy \
	ros-kinetic-ros-numpy \
	ros-kinetic-jsk-recognition-msgs && \
	pip install rospkg PyYAML sympy pyquaternion

# 5. Configure some CARLA Challenge environment variables

ENV TEAM_AGENT ${TEAM_CODE_ROOT}/RobesafeAgent.py
ENV CHALLENGE_TRACK_CODENAME MAP

########################################################################################################################
########################################################################################################################
############                                   END OF USER COMMANDS                                         ############
########################################################################################################################
########################################################################################################################

ENV SCENARIOS ${LEADERBOARD_ROOT}/data/all_towns_traffic_scenarios_public.json
ENV ROUTES ${LEADERBOARD_ROOT}/data/routes_training.xml
ENV REPETITIONS 1
ENV CHECKPOINT_ENDPOINT /workspace/results/results.json
ENV DEBUG_CHALLENGE 0

ENV HTTP_PROXY ""
ENV HTTPS_PROXY ""
ENV http_proxy ""
ENV https_proxy ""

CMD ["/bin/bash"]

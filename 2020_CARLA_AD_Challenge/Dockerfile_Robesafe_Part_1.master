# CARLA Autonomous Driving Challenge 2020
# Carlos Gómez-Huélamo (RobeSafe research group - University of Alcalá)

FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG http_proxy

RUN apt-get update && apt-get install --reinstall -y locales && locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US
ENV LC_ALL en_US.UTF-8

RUN apt-get update && apt-get install -y --no-install-recommends \
         apt-utils \
         build-essential \
         cmake \
         git \
         curl \
         vim \
         ca-certificates \
         libjpeg-dev \
	     libpng16-16 \
	     libtiff5 \
         libpng-dev \
         python-dev \
         python3.5 \
         python3.5-dev \
         python-networkx \
         python-setuptools \
         python3-setuptools \
         python-pip \
         python3-pip && \
         pip install --upgrade pip && \
         pip3 install --upgrade pip && \
         rm -rf /var/lib/apt/lists/*

# installing conda
RUN curl -o ~/miniconda.sh -LO https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda clean -ya && \
     /opt/conda/bin/conda create -n python37 python=3.7 numpy networkx scipy six requests

RUN packages='py_trees==0.8.3 shapely six dictor requests ephem tabulate' \
	&& pip3 install ${packages}

WORKDIR /workspace
COPY .tmp/PythonAPI /workspace/CARLA/PythonAPI
ENV CARLA_ROOT /workspace/CARLA

ENV PATH "/workspace/CARLA/PythonAPI/carla/dist/carla-leaderboard-py3x.egg":/opt/conda/envs/python37/bin:/opt/conda/envs/bin:$PATH

# adding CARLA egg to default python environment
RUN pip install --user setuptools py_trees==0.8.3 psutil shapely six dictor requests ephem tabulate

ENV SCENARIO_RUNNER_ROOT "/workspace/scenario_runner"
ENV LEADERBOARD_ROOT "/workspace/leaderboard"
ENV TEAM_CODE_ROOT "/workspace/team_code"

COPY .tmp/scenario_runner ${SCENARIO_RUNNER_ROOT}
COPY .tmp/leaderboard ${LEADERBOARD_ROOT}

RUN mkdir -p /workspace/results
RUN chmod +x /workspace/leaderboard/scripts/run_evaluation.sh

########################################################################################################################
########################################################################################################################
############                                BEGINNING OF USER COMMANDS                                      ############
########################################################################################################################
########################################################################################################################

# 0. Additional tools required 

RUN apt-get update && apt-get install -y lsb-release \
	apt-utils \
	wget \
	ca-certificates \
	bash \
	sudo

# 1. Install the NVIDIA driver

RUN mkdir -p /workspace/installations && \
	apt-get update && \
	apt-get install -y software-properties-common \
	module-init-tools

COPY ./NVIDIA-Linux-x86_64-440.100.run /workspace/installations

RUN cd /workspace/installations && \
	./NVIDIA-Linux-x86_64-440.100.run -s -N --no-kernel-module

# 2. Install OpenPCDet 

## Clone OpenPCDet repository and install requirements

RUN cd /workspace/installations && \
	git clone https://github.com/JavierEgido/OpenPCDet.git && \
	cd OpenPCDet && \
	pip install -r requirements.txt 

## Install SpConv 

### Update CMake version
 
RUN apt purge -y cmake

RUN cd /workspace/installations && \
	wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2.tar.gz && \
	tar -zxvf cmake-3.13.2.tar.gz && \
	cd cmake-3.13.2 && \
	./bootstrap && \
	make && \
	make install 



